/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef,useState } from "react";
import { useGLTF } from "@react-three/drei";
import {useFrame, useThree} from "@react-three/fiber";
import gsap from "gsap/all";
import AboutMe from "./Screens/AboutMe";
import HolographicMaterial from "./HolographicMaterial";
import { DoubleSide } from "three";

export function Interactables({ props,setShowStartSection }) {
  const { nodes, materials } = useGLTF("/models/Interactables.gltf");

  const {camera} = useThree();
  const controls = useThree((state) => state.controls)
  const timeline = gsap.timeline({
    defaults:{
      ease:"power2.out",
      duration: 5
    },
  });
  console.log(camera.position)    
  console.log(camera.rotation)      
  //controls.enabled = true
  
  const [aboutMeVisible, setAboutMeVisible] = useState(false);
  

  const Arcade = () =>{
    setShowStartSection(false);
        controls.enableRotate = false
        timeline.to(controls.target,{
          x:62.5,
          y:96,
          z:-61.12
        })
        timeline.to(camera.rotation,{
            x: Math.PI *  -0.043961,
            y: 0,
            z: 0

        },">-5")
        timeline.to(camera.position,{
            x: 64,
            y: 100,
            z: -37,
        },">-5");
        
    }

  const PUD = () =>{
    setAboutMeVisible(true);
    setShowStartSection(false);
    controls.enableRotate = false
    timeline.to(controls.target,{
      x:23.29,
      y:50.43,
      z:25.77,
    })
    timeline.to(camera.rotation,{
        x: Math.PI *  -0.0393,
        y: 0,
        z: 0,

    },">-5")
    timeline.to(camera.position,{
        x: 77.05,
        y: 48.36,
        z: 63.24,
    },">-5");  
  }

  const PC = () =>{
    setShowStartSection(false);
    controls.enableRotate = false
            timeline.to(controls.target,{
              x:-72.12,
              y:103.79,
              z:-44.5
            })
            timeline.to(camera.rotation,{
              x: Math.PI *  -0.1233,
              y: Math.PI * 0.4940,
              z: Math.PI * 0.1233

          },">-5")
              timeline.to(camera.position,{
                  x: -46.78,
                  y: 104.85,
                  z: -44.068,
              },">-5");
 }
    
    const ps5ref = useRef();
    const userRef = useRef();
    const webRef = useRef();

    useFrame((state,delta)=> {
        ps5ref.current.rotation.y += 0.005
        webRef.current.rotation.y += 0.005
        userRef.current.rotation.z += 0.005


    });

  
  return (
    <group {...props} dispose={null}>
      <AboutMe isVisible={aboutMeVisible} setVisibility={setAboutMeVisible} />
      <mesh  ref={ps5ref}
        onClick={Arcade}
        castShadow
        receiveShadow
        geometry={nodes.Controller.geometry}
        material={materials.Material}
        position={[63.45, 123.123, -53.995]}
        scale={0.823}
      >
        <HolographicMaterial
            fresnelAmount ={.18}
            hologramOpacity={1}
            signalSpeed={2}
            enableBlinking ={false}
            hologramColor={'#aaaaaa'}
            />

      </mesh>
      <mesh
        ref={webRef}
        onClick={PC}
        castShadow
        receiveShadow
        geometry={nodes.Layer_001.geometry}
        material={nodes.Layer_001.material}
        position={[-61.198, 126.818, -44.388]}
        rotation={[0, Math.PI / 2, 0]}
        scale={6.374}
      >
        <HolographicMaterial
            fresnelAmount ={0.18}
            enableBlinking ={false}
            signalSpeed={2}
            hologramColor={'#aaaaaa'}/>


      </mesh>
      <mesh  ref={userRef}
        onClick={PUD}
        castShadow
        receiveShadow
        geometry={nodes.AboutMe.geometry}
        material={materials.None}
        position={[27.885, 83.878, 27.993]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={6}
      >
        <HolographicMaterial
            fresnelAmount ={0.18}
            signalSpeed={2}
            enableBlinking ={true}
            side={DoubleSide}
            hologramColor={'#aaaaaa'}/>

      </mesh>
      
    </group>
  );
}

useGLTF.preload("/models/Interactables.gltf");
